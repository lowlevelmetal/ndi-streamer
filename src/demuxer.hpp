/**
 * @file demuxer.hpp
 * @brief This file includes utilities for demuxing media files.
 * @date 2024-09-02
 * @author Matthew Todd Geiger
 */

#pragma once

// Local dependencies
#include "averror.hpp"

// 3rd party dependencies
extern "C" {
#include <libavformat/avformat.h>
}

// Standard C++ dependencies
#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace AV::Utils {

// Forward declarations and type definitions
class Demuxer;
using DemuxerResult = std::pair<std::unique_ptr<Demuxer>, const AvException>;
using ReadFrameResult = std::pair<AVPacket *, const AvException>;

/**
 * @brief The Demuxer class provides utilities for demuxing media files.
 * This class is responsible for reading packets from a media file and providing
 * some basic information about the streams.
 */
class Demuxer {
private:
    Demuxer(const std::string &path); // I'm keeping the constructor private so that it can only be called by the factory method

public:
    /**
     * @brief Destroy the Demuxer:: Demuxer object
     */
    ~Demuxer();

    // For now we'll disable copying and assignment.
    // In the future we will make sure that these are implemented correctly.
    Demuxer(const Demuxer &) = delete;
    Demuxer &operator=(const Demuxer &) = delete;

    // Factory methods
    
    /**
     * @brief Create a Demuxer object
     *
     * @param path path to media file
     * @return DemuxerResult
     */
    static DemuxerResult Create(const std::string &path);

    // Getters
    
    /**
     * @brief Read the next frame from the media file.
     *
     * @return ReadFrameResult
     */
    ReadFrameResult ReadFrame();

    /**
     * @brief Get the AVStream pointers that were generated by ffmpeg.
     * This is useful for getting the stream information inexpensively
     * but keep in mind that the AVStream pointers are owned by the Demuxer object.
     *
     * @return std::vector<AVStream *>
     */
    std::vector<AVStream *> GetStreamPointers();

private:
    AvError m_Initialize();

    // Store the path to the media file
    std::string m_path;

    // This is the api context that ffmpeg uses to read the media file
    AVFormatContext *m_format_ctx = nullptr;

    // This is the packet that we will use to read frames from the media file
    AVPacket *m_packet = nullptr;
};

} // namespace AV::Utils
